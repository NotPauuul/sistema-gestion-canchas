/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Formularios;
import Clases.*;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.net.URI;
import java.net.URL;
import java.sql.*;
import javax.swing.table.*;
import javax.swing.*;
/**
 *
 * @author Paul
 */
public class MenuPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form MenuPrincipal
     */
    public MenuPrincipal() {
        initComponents();
        MostrarDatos();
        SetImageLabel(Cerrar,"/Imagenes/Salir.png");
        SetImageLabel(icoborrar,"/Imagenes/Borrar.png");
        SetImageLabel(icofiltro,"/Imagenes/Filtro.png");
        SetImageLabel(Icocupar,"/Imagenes/Ocupar.png");
        SetImageLabel(Icodesocupar,"/Imagenes/Desocupar.png");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        Cerrar = new javax.swing.JLabel();
        CerrarSesion = new javax.swing.JLabel();
        Icodesocupar = new javax.swing.JLabel();
        Aplicar = new javax.swing.JLabel();
        Quitar = new javax.swing.JLabel();
        icoborrar = new javax.swing.JLabel();
        Ocuparlb = new javax.swing.JLabel();
        lbDesocupar = new javax.swing.JLabel();
        Icocupar = new javax.swing.JLabel();
        Titulo1 = new javax.swing.JLabel();
        Titulo2 = new javax.swing.JLabel();
        Filtros1 = new javax.swing.JLabel();
        Filtros2 = new javax.swing.JLabel();
        icofiltro = new javax.swing.JLabel();
        Alquilar = new javax.swing.JButton();
        Filtros = new javax.swing.JButton();
        Tipos = new javax.swing.JComboBox<>();
        Borrar = new javax.swing.JButton();
        Estado = new javax.swing.JComboBox<>();
        Facultad = new javax.swing.JComboBox<>();
        Desocupar = new javax.swing.JButton();
        Salir = new javax.swing.JButton();
        Fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1025, 769));
        setResizable(false);
        setSize(new java.awt.Dimension(1024, 768));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Tipo", "Estado", "Facultad", "Ubicación"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Tabla);
        if (Tabla.getColumnModel().getColumnCount() > 0) {
            Tabla.getColumnModel().getColumn(0).setResizable(false);
            Tabla.getColumnModel().getColumn(0).setPreferredWidth(1);
            Tabla.getColumnModel().getColumn(1).setResizable(false);
            Tabla.getColumnModel().getColumn(1).setPreferredWidth(1);
            Tabla.getColumnModel().getColumn(2).setResizable(false);
            Tabla.getColumnModel().getColumn(2).setPreferredWidth(1);
            Tabla.getColumnModel().getColumn(3).setResizable(false);
            Tabla.getColumnModel().getColumn(3).setPreferredWidth(35);
            Tabla.getColumnModel().getColumn(4).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 220, 750, 530));

        Cerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Salir.png"))); // NOI18N
        getContentPane().add(Cerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 60, 50));

        CerrarSesion.setFont(new java.awt.Font("Bebas Neue", 0, 18)); // NOI18N
        CerrarSesion.setText(" Cerrar Sesión");
        getContentPane().add(CerrarSesion, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, -1, -1));

        Icodesocupar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Desocupar.png"))); // NOI18N
        getContentPane().add(Icodesocupar, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 690, 50, 40));

        Aplicar.setFont(new java.awt.Font("Bebas Neue", 0, 18)); // NOI18N
        Aplicar.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Aplicar.setText(" Aplicar Filtros");
        getContentPane().add(Aplicar, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 220, 140, 70));

        Quitar.setFont(new java.awt.Font("Bebas Neue", 0, 18)); // NOI18N
        Quitar.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Quitar.setText("Borrar Filtros");
        getContentPane().add(Quitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 320, 140, 70));

        icoborrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Borrar.png"))); // NOI18N
        getContentPane().add(icoborrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 330, 40, 50));

        Ocuparlb.setFont(new java.awt.Font("Bebas Neue", 0, 18)); // NOI18N
        Ocuparlb.setText("                            Ocupar");
        getContentPane().add(Ocuparlb, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 600, 140, 60));

        lbDesocupar.setFont(new java.awt.Font("Bebas Neue", 0, 18)); // NOI18N
        lbDesocupar.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbDesocupar.setText("Desocupar");
        getContentPane().add(lbDesocupar, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 680, 140, 60));

        Icocupar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Ocupar.png"))); // NOI18N
        getContentPane().add(Icocupar, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 600, 60, 60));

        Titulo1.setFont(new java.awt.Font("Bebas Neue", 1, 60)); // NOI18N
        Titulo1.setForeground(new java.awt.Color(255, 255, 255));
        Titulo1.setText("  Canchas Deportivas");
        getContentPane().add(Titulo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 520, 80));

        Titulo2.setFont(new java.awt.Font("Bebas Neue", 1, 60)); // NOI18N
        Titulo2.setText("Canchas Deportivas");
        getContentPane().add(Titulo2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, -1, -1));

        Filtros1.setFont(new java.awt.Font("Bebas Neue", 1, 48)); // NOI18N
        Filtros1.setForeground(new java.awt.Color(255, 255, 255));
        Filtros1.setText("Filtros:");
        getContentPane().add(Filtros1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 110, 200, 80));

        Filtros2.setFont(new java.awt.Font("Bebas Neue", 1, 48)); // NOI18N
        Filtros2.setText(" Filtros:");
        getContentPane().add(Filtros2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, 160, -1));

        icofiltro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Filtro.png"))); // NOI18N
        getContentPane().add(icofiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(67, 230, 40, 50));

        Alquilar.setBackground(new java.awt.Color(255, 0, 0));
        Alquilar.setFont(new java.awt.Font("Bebas Neue", 0, 20)); // NOI18N
        Alquilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlquilarActionPerformed(evt);
            }
        });
        getContentPane().add(Alquilar, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 600, 150, 60));

        Filtros.setBackground(new java.awt.Color(153, 0, 153));
        Filtros.setFont(new java.awt.Font("Bebas Neue", 0, 20)); // NOI18N
        Filtros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FiltrosActionPerformed(evt);
            }
        });
        getContentPane().add(Filtros, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 220, 150, 70));

        Tipos.setFont(new java.awt.Font("Bebas Neue", 0, 18)); // NOI18N
        Tipos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tipo", "Fútbol", "Basket", "Voley", "Voley Pie" }));
        Tipos.setToolTipText("");
        Tipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TiposActionPerformed(evt);
            }
        });
        getContentPane().add(Tipos, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 130, 170, 40));

        Borrar.setBackground(new java.awt.Color(0, 0, 255));
        Borrar.setFont(new java.awt.Font("Bebas Neue", 0, 20)); // NOI18N
        Borrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarActionPerformed(evt);
            }
        });
        getContentPane().add(Borrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 320, 150, 70));

        Estado.setFont(new java.awt.Font("Bebas Neue", 0, 18)); // NOI18N
        Estado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Estado", "Disponible", "Ocupado" }));
        getContentPane().add(Estado, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 130, 170, 40));

        Facultad.setFont(new java.awt.Font("Bebas Neue", 0, 18)); // NOI18N
        Facultad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Facultad", "Mecánica", "Informática y Electrónica", "Administración de Empresas", "Salud Pública", "Ciencias Pecuarias", "Recursos Naturales", "Ninguna" }));
        getContentPane().add(Facultad, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 130, 170, 40));

        Desocupar.setBackground(new java.awt.Color(0, 255, 0));
        Desocupar.setFont(new java.awt.Font("Bebas Neue", 0, 20)); // NOI18N
        Desocupar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DesocuparActionPerformed(evt);
            }
        });
        getContentPane().add(Desocupar, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 680, 150, 60));

        Salir.setBackground(new java.awt.Color(153, 0, 0));
        Salir.setFont(new java.awt.Font("Bebas Neue", 0, 18)); // NOI18N
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });
        getContentPane().add(Salir, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 90, 80));

        Fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Fondo.png"))); // NOI18N
        getContentPane().add(Fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 770));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TiposActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TiposActionPerformed

    private void TablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMouseClicked
        int row = Tabla.rowAtPoint(evt.getPoint());
            int column = Tabla.columnAtPoint(evt.getPoint());

            if (column == 4) { 
                Object value = Tabla.getValueAt(row, column);
                if (value != null && value instanceof String) {
                    String url = (String) value;
                    try {
                        Desktop.getDesktop().browse(new URI(url));
                    } catch (Exception ex) {
                        System.out.println("Error al abrir la URL: " + ex.getMessage());
                    }
                }
            }
    }//GEN-LAST:event_TablaMouseClicked

    private void BorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarActionPerformed
        MostrarDatos();
        Tipos.setSelectedIndex(0);
        Estado.setSelectedIndex(0);
        Facultad.setSelectedIndex(0);
    }//GEN-LAST:event_BorrarActionPerformed

    private void FiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FiltrosActionPerformed
        MostrarFiltros();
    }//GEN-LAST:event_FiltrosActionPerformed

    private void AlquilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlquilarActionPerformed
        Ocupar();
    }//GEN-LAST:event_AlquilarActionPerformed

    private void DesocuparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DesocuparActionPerformed
        Desocupar();
    }//GEN-LAST:event_DesocuparActionPerformed

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        LogIn loginFrame = new LogIn();
        loginFrame.setVisible(true);
        loginFrame.pack();
        loginFrame.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_SalirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuPrincipal().setVisible(true);
            }
        });
    }
    
    public void MostrarDatos(){
        ConexionDB con = new ConexionDB();
        Connection conect = con.conectar();
        
        DefaultTableModel modelo = (DefaultTableModel) Tabla.getModel(); 
        modelo.setRowCount(0);
        String []info = new String[5];
        
        try {
            Statement leer = conect.createStatement();
            ResultSet resultado = leer.executeQuery("SELECT * FROM Canchas");
            
            while (resultado.next()){
                info [0] =resultado.getString(1);
                info [1] =resultado.getString(2);
                info [2] =resultado.getString(3);
                info [3] =resultado.getString(4);
                info [4] =resultado.getString(5);
                modelo.addRow(info);
            }
            
            } catch (Exception e) {
                System.out.println(e);
            } finally {
            try {
                if (conect != null) {
                    conect.close();
                }
            } catch (SQLException e) {
                System.out.println("Error al cerrar la conexión: " + e.getMessage());
            }
        }

        
        Tabla.setRowHeight(55);
        
        Tabla.getColumnModel().getColumn(0).setMinWidth(20);
        Tabla.getColumnModel().getColumn(0).setMaxWidth(30);
        Tabla.getColumnModel().getColumn(0).setPreferredWidth(25);
        Tabla.getColumnModel().getColumn(2).setMinWidth(20);
        Tabla.getColumnModel().getColumn(2).setMaxWidth(100);
        Tabla.getColumnModel().getColumn(2).setPreferredWidth(80);
        Tabla.getColumnModel().getColumn(1).setMinWidth(20);
        Tabla.getColumnModel().getColumn(1).setMaxWidth(100);
        Tabla.getColumnModel().getColumn(1).setPreferredWidth(80);
        Tabla.getColumnModel().getColumn(3).setMinWidth(20);
        Tabla.getColumnModel().getColumn(3).setMaxWidth(250);
        Tabla.getColumnModel().getColumn(3).setPreferredWidth(220);
        
        Tabla.getColumnModel().getColumn(4).setCellRenderer(new Links());
        Tabla.getColumnModel().getColumn(2).setCellRenderer(new Colores());
    }
    
    public void MostrarFiltros(){
        ConexionDB con = new ConexionDB();
        Connection conect = con.conectar();
        
        DefaultTableModel modelo = (DefaultTableModel) Tabla.getModel(); 
        modelo.setRowCount(0);
        
        String []info = new String[5];
        
        try {
            Statement leer = conect.createStatement();
            ResultSet resultado = null;
            String query = "SELECT * FROM Canchas WHERE 1=1";

            if (!Tipos.getSelectedItem().equals("Tipo")) {
                query += " AND Tipo = '" + CorreccionTipo() + "'";
            }

            if (!Estado.getSelectedItem().equals("Estado")) {
                query += " AND Disponibilidad = '" + String.valueOf(Estado.getSelectedItem()) + "'";
            }

            if (!Facultad.getSelectedItem().equals("Facultad")) {
                query += " AND Facultad = '" + CorrecionFacultad() + "'";
            }

            resultado = leer.executeQuery(query);
            
            while (resultado.next()){
                info [0] =resultado.getString(1);
                info [1] =resultado.getString(2);
                info [2] =resultado.getString(3);
                info [3] =resultado.getString(4);
                info [4] =resultado.getString(5);
                modelo.addRow(info);
            }
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            try {
                if (conect != null) {
                    conect.close();
                }
            } catch (SQLException e) {
                System.out.println("Error al cerrar la conexión: " + e.getMessage());
            }
        }
        Tabla.setRowHeight(55);
        
        Tabla.getColumnModel().getColumn(0).setMinWidth(20);
        Tabla.getColumnModel().getColumn(0).setMaxWidth(30);
        Tabla.getColumnModel().getColumn(0).setPreferredWidth(25);
        Tabla.getColumnModel().getColumn(2).setMinWidth(20);
        Tabla.getColumnModel().getColumn(2).setMaxWidth(100);
        Tabla.getColumnModel().getColumn(2).setPreferredWidth(80);
        Tabla.getColumnModel().getColumn(1).setMinWidth(20);
        Tabla.getColumnModel().getColumn(1).setMaxWidth(100);
        Tabla.getColumnModel().getColumn(1).setPreferredWidth(80);
        Tabla.getColumnModel().getColumn(3).setMinWidth(20);
        Tabla.getColumnModel().getColumn(3).setMaxWidth(250);
        Tabla.getColumnModel().getColumn(3).setPreferredWidth(220);
        
        Tabla.getColumnModel().getColumn(4).setCellRenderer(new Links());
        Tabla.getColumnModel().getColumn(2).setCellRenderer(new Colores());
    }
    
    
    public String CorreccionTipo(){
        String Tipo;
        if (Tipos.getSelectedItem().equals("Fútbol")) {
                Tipo = "Futbol";
        }
        else if (Tipos.getSelectedItem().equals("Voley Pie")) {
                Tipo = "Sepak Takraw (Voleibol con los pies)";
        }
        else if (Tipos.getSelectedItem().equals("Voley")) {
                Tipo = "Voleibol";
        }
        else{
            Tipo = String.valueOf(Tipos.getSelectedItem());
        }
        return Tipo;
    }
    
    public String CorrecionFacultad(){
        String Facultades;
        if (Facultad.getSelectedItem().equals("Mecánica")) {
            Facultades = "Mecanica";
        }
        else if (Facultad.getSelectedItem().equals("Administración de Empresas")) {
            Facultades = "Administracion de Empresas - FADE";
        }
        else if (Facultad.getSelectedItem().equals("Salud Pública")) {
            Facultades = "Salud Publica";
        }
        else if (Facultad.getSelectedItem().equals("Informática y Electrónica")) {
            Facultades = "Informatica y Electronica - FIE";
        }
        else{
            Facultades = String.valueOf(Facultad.getSelectedItem());
        }
        return Facultades;
    }
    
    public void Ocupar() {
    int filaSeleccionada = Tabla.getSelectedRow(); 

    if (filaSeleccionada != -1) {
        String idCanchas = Tabla.getValueAt(filaSeleccionada, 0).toString();

        String estadoActual = Tabla.getValueAt(filaSeleccionada, 2).toString();
        
        if ("Disponible".equals(estadoActual)) {
            Tabla.setValueAt("Ocupado", filaSeleccionada, 2);
            
            ConexionDB con = new ConexionDB();
            Connection conect = con.conectar();
            
            try {
                String query = "UPDATE Canchas SET Disponibilidad = 'Ocupado' WHERE ID = ?";
                PreparedStatement stmt = conect.prepareStatement(query);
                stmt.setString(1, idCanchas); 
                stmt.executeUpdate();
                
                JOptionPane.showMessageDialog(null, "Estado actualizado, Disfruta tu partido!");
            } catch (Exception e) {
                System.out.println("Error al actualizar el estado: " + e.getMessage());
                JOptionPane.showMessageDialog(null, "Error al actualizar el estado.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "La cancha ya está ocupada.");
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, selecciona una fila para editar.");
    }
}
    
    public void Desocupar() {
    int filaSeleccionada = Tabla.getSelectedRow(); 

    if (filaSeleccionada != -1) {
        String idCanchas = Tabla.getValueAt(filaSeleccionada, 0).toString();

        String estadoActual = Tabla.getValueAt(filaSeleccionada, 2).toString();
        
        if ("Ocupado".equals(estadoActual)) {
            Tabla.setValueAt("Disponible", filaSeleccionada, 2);
            
            ConexionDB con = new ConexionDB();
            Connection conect = con.conectar();
            
            try {
                String query = "UPDATE Canchas SET Disponibilidad = 'Disponible' WHERE ID = ?";
                PreparedStatement stmt = conect.prepareStatement(query);
                stmt.setString(1, idCanchas); 
                stmt.executeUpdate();
                
                JOptionPane.showMessageDialog(null, "Estado actualizado, Espero que te hayas divertido!");
            } catch (Exception e) {
                System.out.println("Error al actualizar el estado: " + e.getMessage());
                JOptionPane.showMessageDialog(null, "Error al actualizar el estado.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "La cancha ya está disponible.");
        }
    } else {
        JOptionPane.showMessageDialog(null, "Por favor, selecciona una fila para editar.");
    }
}

    private void SetImageLabel(JLabel labelname, String resourcePath)
    {
        URL imageUrl = getClass().getResource(resourcePath);
        if (imageUrl != null) {
            ImageIcon image = new ImageIcon(imageUrl);
            Icon icon = new ImageIcon(image.getImage().getScaledInstance(labelname.getWidth(), labelname.getHeight(), Image.SCALE_DEFAULT));
            labelname.setIcon(icon);
            this.repaint();
        } else {
            System.out.println("Imagen no encontrada: " + resourcePath);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Alquilar;
    private javax.swing.JLabel Aplicar;
    private javax.swing.JButton Borrar;
    private javax.swing.JLabel Cerrar;
    private javax.swing.JLabel CerrarSesion;
    private javax.swing.JButton Desocupar;
    private javax.swing.JComboBox<String> Estado;
    private javax.swing.JComboBox<String> Facultad;
    private javax.swing.JButton Filtros;
    private javax.swing.JLabel Filtros1;
    private javax.swing.JLabel Filtros2;
    private javax.swing.JLabel Fondo;
    private javax.swing.JLabel Icocupar;
    private javax.swing.JLabel Icodesocupar;
    private javax.swing.JLabel Ocuparlb;
    private javax.swing.JLabel Quitar;
    private javax.swing.JButton Salir;
    private javax.swing.JTable Tabla;
    private javax.swing.JComboBox<String> Tipos;
    private javax.swing.JLabel Titulo1;
    private javax.swing.JLabel Titulo2;
    private javax.swing.JLabel icoborrar;
    private javax.swing.JLabel icofiltro;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbDesocupar;
    // End of variables declaration//GEN-END:variables
}
